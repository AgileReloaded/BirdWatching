Depends on:

Junit > 4.0
Guava > 10.0.1 (http://code.google.com/p/guava-libraries/)

PASSI REFACTORING

rimosso width da GameField
rimosso height da GameField
rimosso depth da GemaField
modificato chiamata a costruttore Location in GameField.placingBirds per accettare anche altezza (h)
modificato Bird.setHeight e getHeight per ritornare location.h
cancellato int height = bird.getHeight(); da GameField.shot
cancellato metodo getHeight da Bird
spostato int h = bird.getHeight(); sotto dichiarazione di location in GameField.isGameFieldValid
sostituito bird.getHeigth con location.h
implementato equals su Location
estratta responsabilità di random placing strategy in placeBirds()
creato null placing strategy
creato placingstrategy factory
inlainato placeBirds
trasformato in field placingStrategyFactory
creato costruttore che accetta placingStrategyFactory
encapsulato Location x,y,h con getters
setHeight su Chicken chiama location.flatten che ritorna nuova locazione
rimossi i throw exception da IPlacingStrategy
rimosso try catch da startGame
estratto metodo per gameStarted 
spostata responsabilità di determinazione uccello colpito da FameField.shot a bird.wasHit
introdotto location come unico parametro di FieldSize.isWithinField
cambiato GameFieldValid per mettere in AND le condizioni
creata classe BirdList ed usata nel costruttore di GameField
spostata responsabilità shot in anyBirdWasHit
spostata responsabilita' isGameFieldValid in areAllBirdsPlacedWithinField
introduces guava library
semplificato anyBirdWasHit usando Iterables.any from guava
semplificato areAllBirdsPlacedWithinField usando Iterables.all from guava
Creata Interfaccia Grid con shot method e due implementazioni InvalidGrid e ValidGrid
Creato factory method dentro startGame che ritorna Grid
Introdotto isValid method in Grid per supportare precedente interfaccia
Rinominato GameField in BirdWatchingPlanner
           FieldSize in GridSize
           startGame in placeOnGrid
           isGameStarted in isPlacementValid



